{"version":3,"sources":["scripts/main.js"],"names":["vectorCompactBegin","vectorCompactSequence","vectorCompactUndefined","Vector","Array","changed","previous","score","state","index","i","length","current","undefined","sum","Grid","size","grid","fnIndex","vector","gridChanged","j","compact","gridLength","array","victory","emptyCount","Math","floor","random","hasMoves","tempGrid","compactUp","compactRight","fill","generate","Game","gameField","document","querySelector","started","buttonState","cell","rows","cells","value","textContent","className","key","compactDown","compactLeft","classList","remove","render","innerText","includes","start","messages","querySelectorAll","add","startButton","addEventListener","arrowClick","handleKeyUp","window","onload","game","run"],"mappings":"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","file":"main.71dfd3b1.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst vectorCompactBegin = 0;\r\nconst vectorCompactSequence = 1;\r\nconst vectorCompactUndefined = 2;\r\n\r\nclass Vector extends Array {\r\n  compact() {\r\n    let changed = false;\r\n    let score = 0;\r\n\r\n    let state = vectorCompactBegin;\r\n    let index = 0;\r\n    let previous;\r\n\r\n    for (let i = 0; i < this.length; i++) {\r\n      const current = this[i];\r\n\r\n      switch (state) {\r\n        case vectorCompactBegin:\r\n          if (current === undefined) {\r\n            state = vectorCompactUndefined;\r\n          } else {\r\n            state = vectorCompactSequence;\r\n            previous = current;\r\n            this[index] = current;\r\n          }\r\n          break;\r\n\r\n        case vectorCompactUndefined:\r\n          if (current !== undefined) {\r\n            state = vectorCompactSequence;\r\n            previous = current;\r\n            this[index] = current;\r\n            changed = true;\r\n          }\r\n          break;\r\n\r\n        case vectorCompactSequence:\r\n          if (current !== undefined) {\r\n            if (current === previous) {\r\n              state = vectorCompactBegin;\r\n\r\n              const sum = current + previous;\r\n\r\n              this[index++] = sum;\r\n\r\n              score = sum;\r\n              changed = true;\r\n            } else {\r\n              previous = current;\r\n              this[++index] = current;\r\n            }\r\n          }\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (state === vectorCompactSequence) {\r\n      index++;\r\n    }\r\n\r\n    while (index < this.length) {\r\n      this[index++] = undefined;\r\n    }\r\n\r\n    return {\r\n      changed, score,\r\n    };\r\n  }\r\n}\r\n\r\nclass Grid {\r\n  constructor(size) {\r\n    this.grid = new Array(size * size);\r\n    this.size = size;\r\n    this.score = 0;\r\n  }\r\n\r\n  compact(fnIndex) {\r\n    const vector = new Vector(this.size);\r\n    let gridChanged = false;\r\n\r\n    for (let i = 0; i < this.size; i++) {\r\n      for (let j = 0; j < this.size; j++) {\r\n        vector[j] = this.grid[fnIndex(i, j)];\r\n      }\r\n\r\n      const { changed, score } = vector.compact();\r\n\r\n      gridChanged = gridChanged || changed;\r\n      this.score += score;\r\n\r\n      for (let j = 0; j < this.size; j++) {\r\n        this.grid[fnIndex(i, j)] = vector[j];\r\n      }\r\n    }\r\n\r\n    return gridChanged;\r\n  }\r\n\r\n  compactUp() {\r\n    return this.compact((i, j) => this.size * j + i);\r\n  }\r\n\r\n  compactDown() {\r\n    return this.compact((i, j) => this.size * (3 - j) + i);\r\n  }\r\n\r\n  compactLeft() {\r\n    return this.compact((i, j) => this.size * i + j);\r\n  }\r\n\r\n  compactRight() {\r\n    return this.compact((i, j) => this.size * (4 - i) - 1 - j);\r\n  }\r\n\r\n  generate() {\r\n    const gridLength = this.grid.length;\r\n    const array = new Array(gridLength);\r\n    let victory = false;\r\n    let emptyCount = 0;\r\n\r\n    for (let i = 0; i < gridLength; i++) {\r\n      if (this.grid[i] === undefined) {\r\n        array[emptyCount++] = i;\r\n      } else if (this.grid[i] === 2048) {\r\n        victory = true;\r\n      }\r\n    }\r\n\r\n    // emptyCount cannot be 0\r\n    // as there are at least one empty cell after success move\r\n\r\n    const index = Math.floor(Math.random() * emptyCount);\r\n\r\n    this.grid[array[index]] = Math.random() > 0.9 ? 4 : 2;\r\n\r\n    // in case we have just filled the only remaining empty cell\r\n    // we must check whether we are capable of making move or the game is over\r\n\r\n    let hasMoves = emptyCount > 1;\r\n\r\n    if (!hasMoves) {\r\n      const tempGrid = new Grid(this.size);\r\n\r\n      tempGrid.grid = [...this.grid];\r\n      hasMoves = tempGrid.compactUp() || tempGrid.compactRight();\r\n    }\r\n\r\n    return {\r\n      hasMoves, victory,\r\n    };\r\n  }\r\n\r\n  start() {\r\n    this.grid.fill(undefined);\r\n    this.score = 0;\r\n\r\n    this.generate();\r\n    this.generate();\r\n  }\r\n}\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.gameField = document.querySelector('.game-field');\r\n    this.grid = new Grid(4);\r\n    this.score = 0;\r\n    this.started = false;\r\n    this.buttonState = 'start';\r\n  }\r\n\r\n  render() {\r\n    for (let i = 0; i < 16; i++) {\r\n      const cell = this.gameField.rows[Math.floor(i / 4)].cells[i % 4];\r\n      const value = this.grid.grid[i];\r\n\r\n      if (value === undefined) {\r\n        cell.textContent = '';\r\n        cell.className = 'field-cell';\r\n      } else {\r\n        cell.textContent = value;\r\n        cell.className = `field-cell field-cell--appear field-cell--${value}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  handleKeyUp(key, score) {\r\n    if (this.started) {\r\n      let changed = false;\r\n\r\n      switch (key) {\r\n        case 'ArrowUp':\r\n          changed = this.grid.compactUp();\r\n          break;\r\n\r\n        case 'ArrowDown':\r\n          changed = this.grid.compactDown();\r\n          break;\r\n\r\n        case 'ArrowRight':\r\n          changed = this.grid.compactRight();\r\n          break;\r\n\r\n        case 'ArrowLeft':\r\n          changed = this.grid.compactLeft();\r\n          break;\r\n      }\r\n\r\n      if (changed) {\r\n        const { hasMoves, victory } = this.grid.generate();\r\n\r\n        if (victory) {\r\n          const messageWin = document.querySelector('.message-win');\r\n\r\n          messageWin.classList.remove('hidden');\r\n        }\r\n\r\n        if (!hasMoves) {\r\n          const messageLose = document.querySelector('.message-lose');\r\n\r\n          messageLose.classList.remove('hidden');\r\n        }\r\n      }\r\n\r\n      this.render();\r\n      this.score = this.grid.score;\r\n      score.innerText = this.score;\r\n\r\n      if (this.grid.grid.includes(2048)) {\r\n        const messageWin = document.querySelector('.message-win');\r\n\r\n        messageWin.classList.remove('hidden');\r\n      }\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.grid.start();\r\n    this.started = true;\r\n    this.score = 0;\r\n\r\n    const messages = document.querySelectorAll('.message');\r\n\r\n    for (const message of messages) {\r\n      message.classList.add('hidden');\r\n    }\r\n\r\n    this.render();\r\n  }\r\n\r\n  run() {\r\n    const startButton = document.querySelector('button');\r\n\r\n    startButton.addEventListener('click', () => {\r\n      if (this.buttonState === 'start') {\r\n        this.start();\r\n        this.buttonState = 'restart';\r\n\r\n        startButton.classList.remove('start');\r\n        startButton.classList.add('restart');\r\n        startButton.textContent = 'Restart';\r\n      } else if (this.buttonState === 'restart') {\r\n        this.start();\r\n        score.innerText = this.score;\r\n      }\r\n    });\r\n\r\n    const score = document.querySelector('.game-score');\r\n\r\n    score.innerText = this.score;\r\n\r\n    document.addEventListener('keyup', (arrowClick) =>\r\n      this.handleKeyUp(arrowClick.key, score)\r\n    );\r\n  }\r\n}\r\n\r\nwindow.onload = function() {\r\n  const game = new Game();\r\n\r\n  game.run();\r\n  game.render();\r\n};\r\n"]}